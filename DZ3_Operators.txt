'number' + 3 + 3 = number33					

Лівоасоціативна операція , і конкантинація рядків, тому що в нас є string 'number' і все буде переводитись до string і результат = number33					
						
null + 3 = 3

Спочатку проводить приведення типів null до 0 далі арифметичне додавання 0+3  , результат = 3					
						
5 && "qwerty" = true

Логічне І для числа та стрінга які є true , результат = true					
						
 +'40' + +'2' + "hillel" = 42hillel

Унарний + перетворює 40 та 2 у числа і додаємо ариметичним + отримуємо 42, далі Лівоасоціативна операція , і конкантинація рядків, тому що в нас є string 'hillel' ,  результат = 42hillel					
						
'10' - 5 === 6 = false

Пріоритети спочатку віднімання, потім строге рівняння , операція віднімання перетворює якщо є стринг у цифру, тобто маємо замість стрінги число 10, віднімання дає результат 5, строге рівняння за типом і значенням дає false т я 5 не дорівнює 6 хоча й обидва мають тип числа
						
true + false = 1

Операція арифметичного складання двух булев типів, булеві значення перетворюються у цифри, true у 1 та false у 0 відповідно, довання яких дає результат = 1
						
'4px' - 3 = Nan

Арифметичне віднімання від строки числа дасть помилку Nan , т я при перетворенні стрінг не виконається бо у стрінгу є букви
						
'4' - 3 = 1

Арифметичне віднімання від стрінг числа, стрінг буде перетворений у число 4 т я рядок містить тільки числові символи, результат операціі = 1
						
'6' + 3 ** 0  = 61

Найвищий пріоритет має операція піднесення у степінь, будь яке число у степіні 0 буде дорівнювати 1, далі йде оператор + який виконує конкатенацію (злиття) рядків, якщо хоча б один операнд є рядком. У цьому випадку '6' є рядком, тому 1 перетворюється в рядок і об'єднується з '6'. Результат = 61					
						
 12 / '6' = 2

Арифметичний оператор ділення автоматично перетворює строку у число, стрінг успішно перетворюється у 6 т я не має символів, отже результат 12/6=2
						
 '10' + (5 === 6) = 10false

Операція у дужках має найвищий пріоритет, строге рівняння між цифрами 5 та 6 матиме результат false т я хоча по типу обидві цифри але різні значення. оператор + який виконує конкатенацію (злиття) рядків, якщо хоча б один операнд є рядком.  Конкатенація стрінгу '10' та значення false дає результат 10false
						
null == '' = false

Нестрога рівність між null що рівняється undefined та порожнім рядком, який є рядком і не є спеціальним значенням, яке може дорівнювати null.  Отже рузультат false
						
3 ** (9 / 3) = 27

Операція в дужках має найвищий приоритет, 9/3 =3, отже маємо 3 піднесення в степінь 3, що дорівнює 27
						
!!'false' == !!'true' = true

Унарний оператор НЕ ! має приоритет над нестрога рівність. Унарне НЕ перетворює будь-який непорожній рядок, у булевий тип, т я рядки включаючи 'false' і 'true' не порожні то перетворення обох дає істинну true. Далі ми виконуємо подвійне заперечення булевого true з обох сторін, що дає теж саме значення true, далі маємо нестрогу рівняння двох булевих true, що дає результат true
						
0 || '0' && 1	 = 1

Логічні операції: "І" (&&) мають вищий пріоритет над операціями "АБО" (||) , спочатку виконуємо логічну операцію '0' && 1, непоржній рядок при перетворенні у булеан є true. Логічне І повертає перше хибне значення або останнє істине , тобто якщо перший операнд є хибним (falsy), він повертає його. а якщо перший операнд є істинним (truthy), він повертає другий операнд. В нас перший оператор true, тобто повертає другий що дорівнює 1.  Далі йде логічна операця АБО - 0 || 1 яка повертає 1, оскільки перший операнд є хибним false, і оператор || повертає другий операнд, який є істинним true. Результат = 1
						
(+null == false) < 1 = false

Операція у дужках має найвищий пріоритет. Унарний + перетворює операнд у число, для null це є число 0. Далі виконуємо нестроге рівняння 0==false , яке перетворює обидва значення до одного типу, зліва в нас число 0, зправа false перетворюється також у число 0, порівняння однакових за значеннеми цифр 0 дає true. Далі виконується операція порівняння true <1 ,виконується приведення до одного типу, логічне true перетворюється у 1, далі порівнюємо дві цифри 1, 1<1, результат = false
						
false && true || true = true

Логічні операції: "І" (&&) мають вищий пріоритет над операціями "АБО" (||), тобто спочатку виконуємо операцію логічне І -  false && true.  Якщо перший операнд є хибним (falsy), він негайно повертає його без перевірки другого операнда. Якщо перший операнд є істинним (truthy), він повертає другий операнд. Маємо false. Далі виконуємо логічне АБО false || true Якщо перший операнд є істинним (truthy), він негайно повертає його без перевірки другого операнда.
Якщо перший операнд є хибним (falsy), він повертає другий операнд. Результат повертає другий операнд true.	
						
false && (false || true) = false

Операція у дужках має найвищий пріоритет. Логічне АБО  false || true повертає 2й операд, т я перший false. Отже це true. Далі Логічне І для false && (true) . Якщо перший операнд є хибним (falsy), він негайно повертає його без перевірки другого операнда. Якщо перший операнд є істинним (truthy), він повертає другий операнд. Отже результат перший операнд false
						
(+null == false) < 1 ** 5 = false

Операція у дужках має найвищий пріоритет. Унарний + перетворює операнд у число, для null це є число 0. Далі виконуємо нестроге рівняння 0==false , яке перетворює обидва значення до одного типу, зліва в нас число 0, зправа false перетворюється також у число 0, порівняння однакових за значеннеми цифр 0 дає true. Далі приоритет зправа маємо піднечення 1 у ступінь 5. 1 у будь якому ступіні дорівнює 1.  Далі логічне порівняння true <1.  При порівнянні значень з різними типами, JavaScript виконує неявне приведення типів, щоб обидва операнди стали одного типу перед порівнянням. Після приведення типів true стає 1.  Маємо порівняння 1<1 та результ false оскільки 1 не менше 1 а дорівнює